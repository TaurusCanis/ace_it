# Generated by Django 2.2 on 2021-02-15 21:58

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Definition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('definition', models.CharField(max_length=2500)),
                ('partOfSpeech', models.CharField(max_length=15)),
                ('synonyms', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('antonyms', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('entails', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('also', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('attribute', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('similarTo', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('typeOf', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('hasTypes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('partOf', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('hasParts', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('isInstanceOf', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('hasInstances', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('memberOf', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('hasMembers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('substanceOf', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('hasSubstances', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('inCategory', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('hasCategories', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('usageOf', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('hasUsages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('inRegion', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('regionOf', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('pertainsTo', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('examples', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='question_maker.Definition')),
            ],
        ),
        migrations.CreateModel(
            name='Word',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=250)),
                ('similar_spellings', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('similar_sounds', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('theme_relations', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
                ('associations', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2500), null=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='SynonymAnswerOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_correct', models.BooleanField(default=False)),
                ('value', models.CharField(max_length=200)),
                ('answer_type', models.CharField(default='random_word', max_length=100)),
                ('has_been_vetted', models.BooleanField(default=False)),
                ('synonym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='question_maker.Synonym')),
            ],
        ),
        migrations.AddField(
            model_name='synonym',
            name='word',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='question_maker.Word'),
        ),
        migrations.AddField(
            model_name='definition',
            name='word',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='question_maker.Word'),
        ),
    ]
